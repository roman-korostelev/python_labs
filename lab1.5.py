"""Необходимо написать функцию-генератор flatten_it, которая принимает на вход любой итерируемый аргумент и линеаризует его,
т.е. нужно рекурсивно проходиться по элементам из этого итерируемого объекта, которые также могут являются итерируемыми объектами,
и так далее до произвольной глубины вложенности, пока не дойдем до неитерируемых "листьев" (числа, будевские значения и строки (считаем их не итерируемыми) и тд).
Ваша функция в итоге должна являться итератором по всем "листьям".
Обратите внимание, что возможны циклы по вложенности, вы должны уметь обрабатывать такие ситуации и бросать исключение ValueError в этом случае.
(Пример – на входе список [1, 2, (3, 4, 5), [6, [7, 8]]], на выходе [1, 2, 3, 4, 5, 6, 7 ,8]).

Важно: использовать sys, конструкцию try - НЕЛЬЗЯ."""
def flatten_it(obj):
    """Recursive flatten function"""
    if not isinstance(obj, str) and hasattr(obj, '__iter__'):
        for el in obj:
            if el != obj:
                yield from flatten_it(el)
            else:
                raise ValueError
    else:
        yield obj


if __name__ == "__main__":
    # Test 1

    print(list(flatten_it([1, "21321", [1, [2, [2, [3, 4]]]]])))

    # Test 2
    try:
        a = [1, 2]
        a[1] = a
        print(list(flatten_it([1, a, (3, 4, 5), [6, [7, 8]]])))
    except ValueError:
        print("Self-referenced list")

    # Test 3

    b = map(int, ["2", "3"])
    print(list(flatten_it([1, {1, 2, 3}, ("dsa", 2, b)])))

    # Test 4

    print(list(flatten_it([1, 2, [({x: x**2 for x in range(10)})], {1, "23", 3}])))

    # Test 5

    print(list(flatten_it(((((((1, [2, 4 * [{2, 4}]], "fgddsa", flatten_it([1, [2, 4], 3]))))))))))
